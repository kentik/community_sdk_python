---
name: kentik-api

# Run this workflow all on pushes to master
on:
  pull_request:
    paths: 
    - 'kentik_api_library/**'
    - '.github/workflows/kentik-api.yml'
  push:
    paths: 
    - 'kentik_api_library/**'
    - '.github/workflows/kentik-api.yml'
    tags:
      - "v[0-9].[0-9]+.[0-9]+"

jobs:
  python-versions-setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - id: set-matrix
      run: echo "::set-output name=matrix::{\"python-version\":['3.8', '3.9']}"

  # Static Analysis of the SDK and its code
  # Stuff like linters, etc.
  code-tests:
    needs: python-versions-setup
    runs-on: ubuntu-latest
    strategy: 
      matrix: ${{fromJson(needs.python-versions-setup.outputs.matrix)}}

    steps:
      - name: (HELPER) Checkout Code
        uses: actions/checkout@v2
      - name: Prepare python env
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Install dependencies
        working-directory: ./kentik_api_library
        run: |
          set -xe
          python -VV
          python -m site
          python -m pip install --upgrade -r requirements.txt
          python -m pip install --upgrade -r requirements-dev.txt
      - name: Black
        working-directory: ./kentik_api_library
        run: python3 setup.py black
      - name: Mypy
        working-directory: ./kentik_api_library
        run: python3 setup.py mypy
      - name: PyLint
        working-directory: ./kentik_api_library
        run: python3 setup.py pylint
      - name: PyTest
        working-directory: ./kentik_api_library
        run: python3 setup.py pytest

  build:
    needs: python-versions-setup
    runs-on: ubuntu-latest
    strategy: 
      matrix: ${{fromJson(needs.python-versions-setup.outputs.matrix)}}
    steps:
      - name: (HELPER) Checkout Code
        uses: actions/checkout@v2
      - name: Prepare python env
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Build package
        working-directory: ./kentik_api_library
        run: |
          pip3 install -r requirements.txt
          python3 setup.py build sdist bdist_wheel
      - name: Archive code
        uses: actions/upload-artifact@v2
        with:
          path: kentik_api_library/dist/*.gz
          retention-days: 5
      - name: Archive package
        uses: actions/upload-artifact@v2
        with:
          name: artifacts.python${{ matrix.python-version}}
          path: |
            kentik_api_library/dist/
            kentik_api_library/tests/library/test_imports.py
          retention-days: 5

  package-tests:
    runs-on: ubuntu-latest
    needs: [ python-versions-setup, build ]
    strategy: 
      matrix: ${{fromJson(needs.python-versions-setup.outputs.matrix)}}
    steps:
      - name: Prepare python env
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: artifacts.python${{ matrix.python-version }}
          path: artifacts
      - name: Install lib from package
        run: |
          pip install artifacts/dist/*.whl
      - name: Show installed packages
        run: pip freeze
      - name: Check if import is possible
        run: |
          for package in kentik_api kentik_api.auth kentik_api.api_calls
          do
            python artifacts/tests/library/test_imports.py ${package}
            echo "Imported package: ${package}"
          done
  #Publish package to PyPi job, run only on main branch
  package-publish:
    runs-on: ubuntu-latest
    if: contains(github.ref, '/tags/v')
    needs: [ python-versions-setup, code-tests, build, package-tests ]
    strategy: 
      matrix: 
        python-version: [ '3.8' ]
    steps:
      - name: Prepare python env
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: artifacts.python${{ matrix.python-version }}
          path: artifacts
      - name: Push package to PyPi
        run: |
          python3 -m pip install --user --upgrade twine
          python3 -m twine upload --repository pypi artifacts/dist/* -u __token__ -p ${{ secrets.PYPI_TOKEN }}
